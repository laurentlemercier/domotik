---
- name: All
  hosts: all
  tasks:
  - name: Ensure locale are defined.
    locale_gen:
      name: 'fr_FR.UTF-8'
      state: present
  - apt: update_cache=yes cache_valid_time=3600
  - apt: upgrade=dist
  - name: Ensure packages are installed.
    apt:
      name: "{{ item }}"
      state: present
    with_items:
    - 'python-pip'
    - 'git'
    - 'mosquitto-clients'
  - name: Ensure github repo is up-to-date.
    git:
      repo: 'https://github.com/sylvek/domotik.git'
      dest: '/home/pi/domotik'
      version: 'master'
      force: yes
    tags:
      - refresh
      - update
  - name: Ensure cron is defined.
    cron:
      name: "send cpu temperature"
      job: "/home/pi/domotik/mosquitto_pub/raspberry_cpu_temp.sh sensors/$(hostname)/temp"
      minute: "*/10"
    become: no

- name: Websocket
  hosts: websocket
  handlers:
  - name: restart apache2
    service:
      name: 'apache2'
      state: restarted
  tasks:
  - name: Ensure packages are installed.
    apt:
      name: "{{ item }}"
      state: present
    with_items:
    - 'apache2'
    - 'scons'
    - 'apache2-prefork-dev'
  - name: Ensure apache2 is started.
    service:
      name: apache2
      state: started
  - name: Ensure Github repo apache-websocket is up-to-date.
    git:
      repo: 'https://github.com/sylvek/apache-websocket.git'
      dest: '/home/pi/apache-websocket'
  - name: Ensure Github repo mod_websocket_mosquito is up-to-date.
    git:
      repo: 'https://github.com/sylvek/mod_websocket_mosquitto.git'
      dest: '/home/pi/mod_websocket_mosquitto'
  - shell: apxs2 -i -a -c mod_websocket.c
    args:
        chdir: /home/pi/apache-websocket
  - shell: apxs2 -i -a -c mod_websocket_draft76.c
    args:
        chdir: /home/pi/apache-websocket
  - shell: scons
    args:
        chdir: /home/pi/mod_websocket_mosquitto
  - shell: scons install
    args:
        chdir: /home/pi/mod_websocket_mosquitto
  - name: Ensure websocket mod is configured.
    template:
      src: 'websocket/websocket.conf'
      dest: '/etc/apache2/mods-available/websocket.conf'
  - name: Ensure apache module are started.
    apache2_module:
      name: 'websocket'
      state: present
    notify:
      - restart apache2

- name: Backend
  hosts: back
  handlers:
  - name: reboot
    debug: msg="you should reboot after installation"
  - name: restart lircd
    service:
      name: lirc
      state: restarted
  - name: restart udev
    service:
      name: udev
      state: restarted
  tasks:
  - name: Ensure packages are installed.
    apt:
      name: "{{ item }}"
      state: present
    with_items:
    - 'mosquitto'
    - 'mosquitto-clients'
    - 'python-mosquitto'
    - 'fswebcam'
    - 'lirc'
    - 'liblircclient-dev'
  - name: Ensure pip packages are installed.
    pip:
      name: "{{ item }}"
    with_items:
    - 'paho-mqtt'
    - 'pyserial'
    - 'schedule'

  # configure lirc
  - name: Ensure lirc configuration is OK.
    lineinfile:
      dest: "{{ item.dest }}"
      line: "{{ item.line }}"
    with_items:
    - {dest: '/etc/modules', line: 'lirc_dev'}
    - {dest: '/etc/modules', line: 'lirc_rpi gpio_in_pin=18'}
    - {dest: '/boot/config.txt', line: 'dtoverlay=lirc-rpi'}
    notify: reboot
  - name: Ensure lirc configuration files are OK.
    copy:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      owner: 'root'
      group: 'root'
    with_items:
    - {src: 'lirc/A1156',  dest: '/etc/lirc/lircd.conf'}
    - {src: 'lirc/lircrc', dest: '/etc/lirc/lircrc'}
    - {src: 'lirc/hardware.conf', dest: '/etc/lirc/hardware.conf'}
    notify: restart lircd

  # configure udev
  - name: Ensure udev is configured.
    copy:
      src: 'usb/etc-udev-rules.d-99-usb-serial.rules'
      dest: '/etc/udev/rules.d/99-usb-serial.rules'
      owner: 'root'
      group: 'root'
    notify: restart udev

  # domotik
  - name: Ensure domotik is configured.
    lineinfile:
      dest: '/etc/rc.local'
      line: "nohup /home/pi/domotik/start-back.sh &"
      insertbefore: "^exit 0"
  - name: Ensure domotik cron is defined.
    cron:
      name: "persist current data to prevent to lost it (kernel panic)"
      minute: "*/10"
      job: "sudo pkill -SIGUSR1 service"
    become: no
  - shell: nohup /home/pi/domotik/stop-back.sh
    tags:
      - refresh
      - stop
  - shell: nohup /home/pi/domotik/start-back.sh
    tags:
      - refresh
      - start

- name: Kiosk
  hosts: kiosk
  tasks:
  - name: Ensure packages are installed.
    apt:
      name: "{{ item }}"
      state: present
    with_items:
    - 'x11-xserver-utils'
    - 'libwebkit-dev'
    - 'xserver-xorg'
    - 'xinit'
    - 'matchbox-window-manager'
  - name: Ensure kiosk is configured.
    lineinfile:
      dest: '/etc/X11/Xwrapper.config'
      regexp: '^allowed_users='
      line: 'allowed_users=anybody'
  - name: Ensure Github repo kiosk-browser is up-to-date.
    git:
      repo: 'https://github.com/sylvek/kiosk-browser.git'
      dest: '/home/pi/kiosk-browser'
      version: 'master'
      force: yes
  - name: make browser
    shell: make
    args:
        chdir: /home/pi/kiosk-browser

  # domotik
  - lineinfile: dest=/etc/rc.local line="nohup /home/pi/domotik/start-x.sh &" insertbefore="^exit 0"
  - name: Ensure kiosk cron is defined.
    cron:
      name: "restart webpage"
      minute: "*/20"
      job: "pidof browser | xargs sudo kill > /dev/null 2>&1 || /bin/true && DISPLAY=:0 nohup nice -n 19 sudo /home/pi/kiosk-browser/browser http://{{ hostvars[groups['front'][0]]['inventory_hostname'] }}:3000/internal > /dev/null &"
    become: no
  - shell: pkill xinit || /bin/true
    tags:
      - x_stop
  - shell: nohup /home/pi/domotik/start-x.sh
    become: no
    tags:
      - x_start
  - shell: pkill browser || /bin/true
    tags:
      - kiosk_stop
      - refresh
  - shell: DISPLAY=:0 nohup /home/pi/kiosk-browser/browser http://{{ hostvars[groups['front'][0]]['inventory_hostname'] }}:3000/internal &
    become: no
    tags:
      - kiosk_start
      - refresh

- name: Front
  hosts: front
  tasks:
  - command: dpkg-query -W node
    register: node_check_deb
    failed_when: node_check_deb.rc > 1
    changed_when: node_check_deb.rc == 1
  - get_url:
      url: 'http://node-arm.herokuapp.com/node_latest_armhf.deb'
      dest: '/tmp/node_latest_armhf.deb'
    when: node_check_deb.rc == 1
  - apt:
      deb: '/tmp/node_latest_armhf.deb'
    when: node_check_deb.rc == 1
  - command: dpkg-query -W mongodb
    register: mongodb_check_deb
    failed_when: mongodb_check_deb.rc > 1
    changed_when: mongodb_check_deb.rc == 1
  - get_url:
      url: 'https://github.com/tjanson/mongodb-armhf-deb/releases/download/v2.1.1-1/mongodb_2.1.1_armhf.deb'
      dest: '/tmp/mongodb_2.1.1_armhf.deb'
    when: mongodb_check_deb.rc == 1
  - apt:
      deb: '/tmp/mongodb_2.1.1_armhf.deb'
    when: mongodb_check_deb.rc == 1
  - name: Ensure mongodb is started.
    service:
      name: mongodb
      state: started
      enabled: yes
  - name: Ensure pip packages are installed.
    pip:
      name: "{{ item }}"
    with_items:
    - 'paho-mqtt'
    - 'pymongo'
  - name: Ensure npm packages are installed.
    npm:
      name: "{{ item }}"
      global: yes
    with_items:
    - 'forever'
    - 'bower'

  # domotik
  - name: Ensure domotik is configured.
    lineinfile:
      dest: '/etc/rc.local'
      line: "nohup /home/pi/domotik/start-front.sh {{ hostvars[groups['back'][0]]['inventory_hostname'] }}"
      insertbefore: "^exit 0"
  - name: Ensure check mongodb.py cron is defined.
    cron:
      name: "check mongodb.py"
      minute: "*/5"
      job: "pid=$(pidof python); if [[ -z $pid ]]; then sudo /usr/bin/python /home/pi/domotik/mosquitto_sub/mongodb.py {{ hostvars[groups['back'][0]]['inventory_hostname'] }}; fi &"
    become: no
  - shell: nohup /home/pi/domotik/stop-front.sh
    tags:
      - refresh
      - stop
  - npm: path=/home/pi/domotik/web global=no
    tags:
      - refresh
  - bower: path=/home/pi/domotik/web
    tags:
      - refresh
  - shell: nohup /home/pi/domotik/start-front.sh
    tags:
      - refresh
      - start
